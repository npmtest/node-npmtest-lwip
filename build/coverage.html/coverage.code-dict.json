{"/home/travis/build/npmtest/node-npmtest-lwip/test.js":"/* istanbul instrument in package npmtest_lwip */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        switch (local.modeJs) {\n        // re-init local from window.local\n        case 'browser':\n            local = local.global.utility2.objectSetDefault(\n                local.global.utility2_rollup || local.global.local,\n                local.global.utility2\n            );\n            break;\n        // re-init local from example.js\n        case 'node':\n            local = (local.global.utility2_rollup || require('utility2'))\n                .requireReadme();\n            break;\n        }\n        // export local\n        local.global.local = local;\n    }());\n\n\n\n    // run shared js-env code - function\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - function\n    case 'browser':\n        break;\n\n\n\n    // run node js-env code - function\n    case 'node':\n        break;\n    }\n\n\n\n    // run shared js-env code - post-init\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - post-init\n    case 'browser':\n        local.testCase_browser_nullCase = local.testCase_browser_nullCase || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test browsers's null-case handling-behavior-behavior\n         */\n            onError(null, options);\n        };\n\n        // run tests\n        local.nop(local.modeTest &&\n            document.querySelector('#testRunButton1') &&\n            document.querySelector('#testRunButton1').click());\n        break;\n\n\n\n    // run node js-env code - post-init\n    /* istanbul ignore next */\n    case 'node':\n        local.testCase_buildApidoc_default = local.testCase_buildApidoc_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApidoc's default handling-behavior-behavior\n         */\n            options = { modulePathList: module.paths };\n            local.buildApidoc(options, onError);\n        };\n\n        local.testCase_buildApp_default = local.testCase_buildApp_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApp's default handling-behavior-behavior\n         */\n            local.testCase_buildReadme_default(options, local.onErrorThrow);\n            local.testCase_buildLib_default(options, local.onErrorThrow);\n            local.testCase_buildTest_default(options, local.onErrorThrow);\n            local.testCase_buildCustomOrg_default(options, local.onErrorThrow);\n            options = [];\n            local.buildApp(options, onError);\n        };\n\n        local.testCase_buildCustomOrg_default = local.testCase_buildCustomOrg_default ||\n            function (options, onError) {\n            /*\n             * this function will test buildCustomOrg's default handling-behavior\n             */\n                options = {};\n                local.buildCustomOrg(options, onError);\n            };\n\n        local.testCase_buildLib_default = local.testCase_buildLib_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildLib's default handling-behavior\n         */\n            options = {};\n            local.buildLib(options, onError);\n        };\n\n        local.testCase_buildReadme_default = local.testCase_buildReadme_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildReadme's default handling-behavior-behavior\n         */\n            options = {};\n            local.buildReadme(options, onError);\n        };\n\n        local.testCase_buildTest_default = local.testCase_buildTest_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildTest's default handling-behavior\n         */\n            options = {};\n            local.buildTest(options, onError);\n        };\n\n        local.testCase_webpage_default = local.testCase_webpage_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test webpage's default handling-behavior\n         */\n            options = { modeCoverageMerge: true, url: local.serverLocalHost + '?modeTest=1' };\n            local.browserTest(options, onError);\n        };\n\n        // run test-server\n        local.testRunServer(local);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-lwip/lib.npmtest_lwip.js":"/* istanbul instrument in package npmtest_lwip */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || local;\n        // init lib\n        local.local = local.npmtest_lwip = local;\n        // init exports\n        if (local.modeJs === 'browser') {\n            local.global.utility2_npmtest_lwip = local;\n        } else {\n            module.exports = local;\n            module.exports.__dirname = __dirname;\n            module.exports.module = module;\n        }\n    }());\n}());\n","/home/travis/build/npmtest/node-npmtest-lwip/example.js":"/*\nexample.js\n\nquickstart example\n\ninstruction\n    1. save this script as example.js\n    2. run the shell command:\n        $ npm install npmtest-lwip && PORT=8081 node example.js\n    3. play with the browser-demo on http://127.0.0.1:8081\n*/\n\n\n\n/* istanbul instrument in package npmtest_lwip */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || (local.modeJs === 'browser'\n            ? local.global.utility2_npmtest_lwip\n            : global.utility2_moduleExports);\n        // export local\n        local.global.local = local;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // post-init\n    // run browser js-env code - post-init\n    /* istanbul ignore next */\n    case 'browser':\n        local.testRunBrowser = function (event) {\n            if (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('onreset'))) {\n                // reset output\n                Array.from(\n                    document.querySelectorAll('body > .resettable')\n                ).forEach(function (element) {\n                    switch (element.tagName) {\n                    case 'INPUT':\n                    case 'TEXTAREA':\n                        element.value = '';\n                        break;\n                    default:\n                        element.textContent = '';\n                    }\n                });\n            }\n            switch (event && event.currentTarget && event.currentTarget.id) {\n            case 'testRunButton1':\n                // show tests\n                if (document.querySelector('#testReportDiv1').style.display === 'none') {\n                    document.querySelector('#testReportDiv1').style.display = 'block';\n                    document.querySelector('#testRunButton1').textContent =\n                        'hide internal test';\n                    local.modeTest = true;\n                    local.testRunDefault(local);\n                // hide tests\n                } else {\n                    document.querySelector('#testReportDiv1').style.display = 'none';\n                    document.querySelector('#testRunButton1').textContent = 'run internal test';\n                }\n                break;\n            // custom-case\n            default:\n                break;\n            }\n            if (document.querySelector('#inputTextareaEval1') && (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('oneval')))) {\n                // try to eval input-code\n                try {\n                    /*jslint evil: true*/\n                    eval(document.querySelector('#inputTextareaEval1').value);\n                } catch (errorCaught) {\n                    console.error(errorCaught);\n                }\n            }\n        };\n        // log stderr and stdout to #outputTextareaStdout1\n        ['error', 'log'].forEach(function (key) {\n            console[key + '_original'] = console[key];\n            console[key] = function () {\n                var element;\n                console[key + '_original'].apply(console, arguments);\n                element = document.querySelector('#outputTextareaStdout1');\n                if (!element) {\n                    return;\n                }\n                // append text to #outputTextareaStdout1\n                element.value += Array.from(arguments).map(function (arg) {\n                    return typeof arg === 'string'\n                        ? arg\n                        : JSON.stringify(arg, null, 4);\n                }).join(' ') + '\\n';\n                // scroll textarea to bottom\n                element.scrollTop = element.scrollHeight;\n            };\n        });\n        // init event-handling\n        ['change', 'click', 'keyup'].forEach(function (event) {\n            Array.from(document.querySelectorAll('.on' + event)).forEach(function (element) {\n                element.addEventListener(event, local.testRunBrowser);\n            });\n        });\n        // run tests\n        local.testRunBrowser();\n        break;\n\n\n\n    // run node js-env code - post-init\n    /* istanbul ignore next */\n    case 'node':\n        // export local\n        module.exports = local;\n        // require modules\n        local.fs = require('fs');\n        local.http = require('http');\n        local.url = require('url');\n        // init assets\n        local.assetsDict = local.assetsDict || {};\n        /* jslint-ignore-begin */\n        local.assetsDict['/assets.index.template.html'] = '\\\n<!doctype html>\\n\\\n<html lang=\"en\">\\n\\\n<head>\\n\\\n<meta charset=\"UTF-8\">\\n\\\n<meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\\n\\\n<title>{{env.npm_package_name}} (v{{env.npm_package_version}})</title>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n    box-sizing: false,\\n\\\n    universal-selector: false\\n\\\n*/\\n\\\n* {\\n\\\n    box-sizing: border-box;\\n\\\n}\\n\\\nbody {\\n\\\n    background: #dde;\\n\\\n    font-family: Arial, Helvetica, sans-serif;\\n\\\n    margin: 2rem;\\n\\\n}\\n\\\nbody > * {\\n\\\n    margin-bottom: 1rem;\\n\\\n}\\n\\\n.utility2FooterDiv {\\n\\\n    margin-top: 20px;\\n\\\n    text-align: center;\\n\\\n}\\n\\\n</style>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n*/\\n\\\ntextarea {\\n\\\n    font-family: monospace;\\n\\\n    height: 10rem;\\n\\\n    width: 100%;\\n\\\n}\\n\\\ntextarea[readonly] {\\n\\\n    background: #ddd;\\n\\\n}\\n\\\n</style>\\n\\\n</head>\\n\\\n<body>\\n\\\n<!-- utility2-comment\\n\\\n<div id=\"ajaxProgressDiv1\" style=\"background: #d00; height: 2px; left: 0; margin: 0; padding: 0; position: fixed; top: 0; transition: background 0.5s, width 1.5s; width: 25%;\"></div>\\n\\\nutility2-comment -->\\n\\\n<h1>\\n\\\n<!-- utility2-comment\\n\\\n    <a\\n\\\n        {{#if env.npm_package_homepage}}\\n\\\n        href=\"{{env.npm_package_homepage}}\"\\n\\\n        {{/if env.npm_package_homepage}}\\n\\\n        target=\"_blank\"\\n\\\n    >\\n\\\nutility2-comment -->\\n\\\n        {{env.npm_package_name}} (v{{env.npm_package_version}})\\n\\\n<!-- utility2-comment\\n\\\n    </a>\\n\\\nutility2-comment -->\\n\\\n</h1>\\n\\\n<h3>{{env.npm_package_description}}</h3>\\n\\\n<!-- utility2-comment\\n\\\n<h4><a download href=\"assets.app.js\">download standalone app</a></h4>\\n\\\n<button class=\"onclick onreset\" id=\"testRunButton1\">run internal test</button><br>\\n\\\n<div id=\"testReportDiv1\" style=\"display: none;\"></div>\\n\\\nutility2-comment -->\\n\\\n\\n\\\n\\n\\\n\\n\\\n<label>stderr and stdout</label>\\n\\\n<textarea class=\"resettable\" id=\"outputTextareaStdout1\" readonly></textarea>\\n\\\n<!-- utility2-comment\\n\\\n{{#if isRollup}}\\n\\\n<script src=\"assets.app.js\"></script>\\n\\\n{{#unless isRollup}}\\n\\\nutility2-comment -->\\n\\\n<script src=\"assets.utility2.rollup.js\"></script>\\n\\\n<script src=\"jsonp.utility2._stateInit?callback=window.utility2._stateInit\"></script>\\n\\\n<script src=\"assets.npmtest_lwip.rollup.js\"></script>\\n\\\n<script src=\"assets.example.js\"></script>\\n\\\n<script src=\"assets.test.js\"></script>\\n\\\n<!-- utility2-comment\\n\\\n{{/if isRollup}}\\n\\\nutility2-comment -->\\n\\\n<div class=\"utility2FooterDiv\">\\n\\\n    [ this app was created with\\n\\\n    <a href=\"https://github.com/kaizhu256/node-utility2\" target=\"_blank\">utility2</a>\\n\\\n    ]\\n\\\n</div>\\n\\\n</body>\\n\\\n</html>\\n\\\n';\n        /* jslint-ignore-end */\n        if (local.templateRender) {\n            local.assetsDict['/'] = local.templateRender(\n                local.assetsDict['/assets.index.template.html'],\n                {\n                    env: local.objectSetDefault(local.env, {\n                        npm_package_description: 'the greatest app in the world!',\n                        npm_package_name: 'my-app',\n                        npm_package_nameAlias: 'my_app',\n                        npm_package_version: '0.0.1'\n                    })\n                }\n            );\n        } else {\n            local.assetsDict['/'] = local.assetsDict['/assets.index.template.html']\n                .replace((/\\{\\{env\\.(\\w+?)\\}\\}/g), function (match0, match1) {\n                    // jslint-hack\n                    String(match0);\n                    switch (match1) {\n                    case 'npm_package_description':\n                        return 'the greatest app in the world!';\n                    case 'npm_package_name':\n                        return 'my-app';\n                    case 'npm_package_nameAlias':\n                        return 'my_app';\n                    case 'npm_package_version':\n                        return '0.0.1';\n                    }\n                });\n        }\n        // run the cli\n        if (local.global.utility2_rollup || module !== require.main) {\n            break;\n        }\n        local.assetsDict['/assets.example.js'] =\n            local.assetsDict['/assets.example.js'] ||\n            local.fs.readFileSync(__filename, 'utf8');\n        // bug-workaround - long $npm_package_buildCustomOrg\n        /* jslint-ignore-begin */\n        local.assetsDict['/assets.npmtest_lwip.rollup.js'] =\n            local.assetsDict['/assets.npmtest_lwip.rollup.js'] ||\n            local.fs.readFileSync(\n                local.npmtest_lwip.__dirname + '/lib.npmtest_lwip.js',\n                'utf8'\n            ).replace((/^#!/), '//');\n        /* jslint-ignore-end */\n        local.assetsDict['/favicon.ico'] = local.assetsDict['/favicon.ico'] || '';\n        // if $npm_config_timeout_exit exists,\n        // then exit this process after $npm_config_timeout_exit ms\n        if (Number(process.env.npm_config_timeout_exit)) {\n            setTimeout(process.exit, Number(process.env.npm_config_timeout_exit));\n        }\n        // start server\n        if (local.global.utility2_serverHttp1) {\n            break;\n        }\n        process.env.PORT = process.env.PORT || '8081';\n        console.error('server starting on port ' + process.env.PORT);\n        local.http.createServer(function (request, response) {\n            request.urlParsed = local.url.parse(request.url);\n            if (local.assetsDict[request.urlParsed.pathname] !== undefined) {\n                response.end(local.assetsDict[request.urlParsed.pathname]);\n                return;\n            }\n            response.statusCode = 404;\n            response.end();\n        }).listen(process.env.PORT);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-lwip/node_modules/lwip/index.js":"require('./lib/ImagePrototypeInit');\nrequire('./lib/BatchPrototypeInit');\n\nmodule.exports = require('./lib/obtain');\n","/home/travis/build/npmtest/node-npmtest-lwip/node_modules/lwip/lib/ImagePrototypeInit.js":"(function(undefined) {\n\n    var Image = require('./Image'),\n        path = require('path'),\n        fs = require('fs'),\n        decree = require('decree'),\n        defs = require('./defs'),\n        util = require('./util'),\n        encoder = require('bindings')('lwip_encoder'),\n        lwip_image = require('bindings')('lwip_image'),\n        normalizeColor = util.normalizeColor;\n\n    var judges = {\n        scale: decree(defs.args.scale),\n        resize: decree(defs.args.resize),\n        contain: decree(defs.args.contain),\n        cover: decree(defs.args.cover),\n        rotate: decree(defs.args.rotate),\n        blur: decree(defs.args.blur),\n        hslaAdjust: decree(defs.args.hslaAdjust),\n        saturate: decree(defs.args.saturate),\n        lighten: decree(defs.args.lighten),\n        darken: decree(defs.args.darken),\n        fade: decree(defs.args.fade),\n        opacify: decree(defs.args.opacify),\n        hue: decree(defs.args.hue),\n        crop: decree(defs.args.crop),\n        mirror: decree(defs.args.mirror),\n        pad: decree(defs.args.pad),\n        border: decree(defs.args.border),\n        sharpen: decree(defs.args.sharpen),\n        paste: decree(defs.args.paste),\n        clone: decree(defs.args.clone),\n        extract: decree(defs.args.extract),\n        toBuffer: decree(defs.args.toBuffer),\n        writeFile: decree(defs.args.writeFile),\n        setPixel: decree(defs.args.setPixel),\n        getPixel: decree(defs.args.getPixel)\n    };\n\n    Image.prototype.__lock = function() {\n        if (!this.__locked) this.__locked = true;\n        else throw Error(\"Another image operation already in progress\");\n    };\n\n    Image.prototype.__release = function() {\n        this.__locked = false;\n    };\n\n    Image.prototype.getMetadata = function() {\n        return this.__metadata;\n    };\n\n    Image.prototype.setMetadata = function(data) {\n        if (typeof data != \"string\" && data != null) {\n            throw Error(\"Metadata must be a string or null\");\n        }\n\n        this.__metadata = data;\n        return data;\n    };\n\n    Image.prototype.width = function() {\n        return this.__lwip.width();\n    };\n\n    Image.prototype.height = function() {\n        return this.__lwip.height();\n    };\n\n    Image.prototype.size = function() {\n        return {\n            width: this.__lwip.width(),\n            height: this.__lwip.height()\n        };\n    };\n\n    Image.prototype.getPixel = function() {\n        var args = judges.getPixel(arguments),\n            left = args[0],\n            top = args[1];\n\n        if (left >= this.width() || top >= this.height())\n            throw Error(\"Coordinates exceed dimensions of image\");\n\n        var rgba = this.__lwip.getPixel(left, top);\n\n        return {\n            r: rgba[0],\n            g: rgba[1],\n            b: rgba[2],\n            a: rgba[3]\n        };\n    };\n\n    Image.prototype.scale = function() {\n        this.__lock();\n        var that = this;\n        judges.scale(\n            arguments,\n            function(wRatio, hRatio, inter, callback) {\n                hRatio = hRatio || wRatio;\n                var width = +wRatio * that.width(),\n                    height = +hRatio * that.height();\n                that.__lwip.resize(width, height, defs.interpolations[inter], function(err) {\n                    that.__release();\n                    callback(err, that);\n                });\n            },\n            function(err) {\n                that.__release();\n                throw err;\n            }\n        );\n    };\n\n    Image.prototype.resize = function() {\n        this.__lock();\n        var that = this;\n        judges.resize(\n            arguments,\n            function(width, height, inter, callback) {\n                height = height || width;\n                that.__lwip.resize(+width, +height, defs.interpolations[inter], function(err) {\n                    that.__release();\n                    callback(err, that);\n                });\n            },\n            function(err) {\n                that.__release();\n                throw err;\n            }\n        );\n    };\n\n    Image.prototype.contain = function() {\n        var that = this;\n        judges.contain(\n            arguments,\n            function(width, height, color, inter, callback) {\n                var s = Math.min(width / that.width(), height / that.height());\n                that.scale(s, s, inter, function(err){\n                    if (err) return callback(err);\n                    var padX = (width - that.width()) / 2,\n                        padY = (height - that.height()) / 2;\n                    that.pad(\n                        Math.ceil(padX),\n                        Math.ceil(padY),\n                        Math.floor(padX),\n                        Math.floor(padY),\n                        color,\n                        callback\n                    );\n                });\n            }\n        );\n    };\n\n    Image.prototype.cover = function() {\n        var that = this;\n        judges.cover(\n            arguments,\n            function(width, height, inter, callback) {\n                var s = Math.max(width / that.width(), height / that.height());\n                that.scale(s, s, inter, function(err){\n                    if (err) return callback(err);\n                    that.crop(width, height, callback);\n                });\n            }\n        );\n    };\n\n    Image.prototype.rotate = function() {\n        this.__lock();\n        var that = this;\n        judges.rotate(\n            arguments,\n            function(degs, color, callback) {\n                color = normalizeColor(color);\n                if (color.a < 100) that.__trans = true;\n                that.__lwip.rotate(+degs, +color.r, +color.g, +color.b, +color.a, function(err) {\n                    that.__release();\n                    callback(err, that);\n                });\n            },\n            function(err) {\n                that.__release();\n                throw err;\n            }\n        );\n    };\n\n    Image.prototype.blur = function() {\n        this.__lock();\n        var that = this;\n        judges.blur(\n            arguments,\n            function(sigma, callback) {\n                that.__lwip.blur(+sigma, function(err) {\n                    that.__release();\n                    callback(err, that);\n                });\n            },\n            function(err) {\n                that.__release();\n                throw err;\n            }\n        );\n    };\n\n    Image.prototype.hslaAdjust = function() {\n        this.__lock();\n        var that = this;\n        judges.hslaAdjust(\n            arguments,\n            function(hs, sd, ld, ad, callback) {\n                that.__lwip.hslaAdj(+hs, +sd, +ld, +ad, function(err) {\n                    that.__release();\n                    callback(err, that);\n                });\n            },\n            function(err) {\n                that.__release();\n                throw err;\n            }\n        );\n    };\n\n    Image.prototype.saturate = function() {\n        this.__lock();\n        var that = this;\n        judges.saturate(\n            arguments,\n            function(delta, callback) {\n                that.__lwip.hslaAdj(0, +delta, 0, 0, function(err) {\n                    that.__release();\n                    callback(err, that);\n                });\n            },\n            function(err) {\n                that.__release();\n                throw err;\n            }\n        );\n    };\n\n    Image.prototype.lighten = function() {\n        this.__lock();\n        var that = this;\n        judges.lighten(\n            arguments,\n            function(delta, callback) {\n                that.__lwip.hslaAdj(0, 0, +delta, 0, function(err) {\n                    that.__release();\n                    callback(err, that);\n                });\n            },\n            function(err) {\n                that.__release();\n                throw err;\n            }\n        );\n    };\n\n    Image.prototype.darken = function() {\n        this.__lock();\n        var that = this;\n        judges.darken(\n            arguments,\n            function(delta, callback) {\n                that.__lwip.hslaAdj(0, 0, -delta, 0, function(err) {\n                    that.__release();\n                    callback(err, that);\n                });\n            },\n            function(err) {\n                that.__release();\n                throw err;\n            }\n        );\n    };\n\n    Image.prototype.fade = function() {\n        this.__lock();\n        var that = this;\n        judges.fade(\n            arguments,\n            function(delta, callback) {\n                that.__lwip.hslaAdj(0, 0, 0, -delta, function(err) {\n                    if (+delta > 0) that.__trans = true;\n                    that.__release();\n                    callback(err, that);\n                });\n            },\n            function(err) {\n                that.__release();\n                throw err;\n            }\n        );\n    };\n\n    Image.prototype.opacify = function() {\n        this.__lock();\n        var that = this;\n        judges.opacify(\n            arguments,\n            function(callback) {\n                that.__lwip.opacify(function(err) {\n                    that.__trans = false;\n                    that.__release();\n                    callback(err, that);\n                });\n            },\n            function(err) {\n                that.__release();\n                throw err;\n            }\n        );\n    };\n\n    Image.prototype.hue = function() {\n        this.__lock();\n        var that = this;\n        judges.hue(\n            arguments,\n            function(shift, callback) {\n                that.__lwip.hslaAdj(+shift, 0, 0, 0, function(err) {\n                    that.__release();\n                    callback(err, that);\n                });\n            },\n            function(err) {\n                that.__release();\n                throw err;\n            }\n        );\n    };\n\n    Image.prototype.crop = function() {\n        this.__lock();\n        var that = this;\n        judges.crop(\n            arguments,\n            function(left, top, right, bottom, callback) {\n                if (!right && !bottom) {\n                    var size = that.size(),\n                        width = left,\n                        height = top;\n                    left = 0 | (size.width - width) / 2;\n                    top = 0 | (size.height - height) / 2;\n                    right = left + width - 1;\n                    bottom = top + height - 1;\n                }\n                that.__lwip.crop(left, top, right, bottom, function(err) {\n                    that.__release();\n                    callback(err, that);\n                });\n            },\n            function(err) {\n                that.__release();\n                throw err;\n            }\n        );\n    };\n\n    Image.prototype.mirror = function() {\n        this.__lock();\n        var that = this;\n        judges.mirror(\n            arguments,\n            function(axes, callback) {\n                var xaxis = false,\n                    yaxis = false;\n                if ('x' === axes) xaxis = true;\n                if ('y' === axes) yaxis = true;\n                if ('xy' === axes || 'yx' === axes) {\n                    xaxis = true;\n                    yaxis = true;\n                }\n                that.__lwip.mirror(xaxis, yaxis, function(err) {\n                    that.__release();\n                    callback(err, that);\n                });\n            },\n            function(err) {\n                that.__release();\n                throw err;\n            }\n        );\n    };\n\n    // mirror alias:\n    Image.prototype.flip = Image.prototype.mirror;\n\n    Image.prototype.pad = function() {\n        this.__lock();\n        var that = this;\n        judges.pad(\n            arguments,\n            function(left, top, right, bottom, color, callback) {\n                color = normalizeColor(color);\n                if (color.a < 100) that.__trans = true;\n                that.__lwip.pad(+left, +top, +right, +bottom, +color.r, +color.g, +color.b, +color.a, function(err) {\n                    that.__release();\n                    callback(err, that);\n                });\n            },\n            function(err) {\n                that.__release();\n                throw err;\n            }\n        );\n    };\n\n    Image.prototype.border = function() {\n        this.__lock();\n        var that = this;\n        judges.border(\n            arguments,\n            function(width, color, callback) {\n                color = normalizeColor(color);\n                if (color.a < 100) that.__trans = true;\n                // we can just use image.pad...\n                that.__lwip.pad(+width, +width, +width, +width, +color.r, +color.g, +color.b, +color.a, function(err) {\n                    that.__release();\n                    callback(err, that);\n                });\n            },\n            function(err) {\n                that.__release();\n                throw err;\n            }\n        );\n    };\n\n    Image.prototype.sharpen = function() {\n        this.__lock();\n        var that = this;\n        judges.sharpen(\n            arguments,\n            function(amplitude, callback) {\n                that.__lwip.sharpen(+amplitude, function(err) {\n                    that.__release();\n                    callback(err, that);\n                });\n            },\n            function(err) {\n                that.__release();\n                throw err;\n            }\n        );\n    };\n\n    Image.prototype.paste = function() {\n        this.__lock();\n        var that = this;\n        try{\n            judges.paste(\n                arguments,\n                function(left, top, img, callback) {\n                    // first we retrieve what we need (buffer, dimensions, ...)\n                    // synchronously so that the pasted image doesn't have a chance\n                    // to be changed\n                    var pixbuff = img.__lwip.buffer(),\n                        width = img.__lwip.width(),\n                        height = img.__lwip.height();\n                    if (left + width > that.__lwip.width() || top + height > that.__lwip.height())\n                        throw Error(\"Pasted image exceeds dimensions of base image\");\n                    that.__lwip.paste(+left, +top, pixbuff, +width, +height, function(err) {\n                        that.__release();\n                        callback(err, that);\n                    });\n                }\n            );\n        } catch(err){\n            that.__release();\n            throw err;\n        }\n    };\n\n    Image.prototype.setPixel = function() {\n        this.__lock();\n        var that = this;\n        try{\n            judges.setPixel(\n                arguments,\n                function(left, top, color, callback) {\n                    if (left >= that.width() || top >= that.height())\n                        throw Error(\"Coordinates exceed dimensions of image\");\n                    color = normalizeColor(color);\n                    if (color.a < 100) that.__trans = true;\n                    that.__lwip.setPixel(+left, +top, +color.r, +color.g, +color.b, +color.a, function(err) {\n                        that.__release();\n                        callback(err, that);\n                    });\n                }\n            );\n        } catch(err){\n            that.__release();\n            throw err;\n        }\n    };\n\n    Image.prototype.clone = function() {\n        // no need to lock the image. we don't modify the memory buffer.\n        // just copy it.\n        var that = this;\n        judges.clone(\n            arguments,\n            function(callback) {\n                // first we retrieve what we need (buffer, dimensions, ...)\n                // synchronously so that the original image doesn't have a chance\n                // to be changed (remember, we don't lock it); and only then call\n                // the callback asynchronously.\n                var pixbuff = that.__lwip.buffer(),\n                    width = that.__lwip.width(),\n                    height = that.__lwip.height(),\n                    trans = that.__trans;\n                setImmediate(function() {\n                    callback(null, new Image(pixbuff, width, height, trans));\n                });\n            }\n        );\n    };\n\n    Image.prototype.extract = function() {\n        // no need to lock the image. we don't modify the memory buffer.\n        // just copy it and then crop it.\n        var that = this;\n        judges.extract(\n            arguments,\n            function(left, top, right, bottom, callback) {\n                // first we retrieve what we need (buffer, dimensions, ...)\n                // synchronously so that the original image doesn't have a chance\n                // to be changed (remember, we don't lock it); then we crop it and\n                // only call the callback asynchronously.\n                var pixbuff = that.__lwip.buffer(),\n                    width = that.__lwip.width(),\n                    height = that.__lwip.height(),\n                    trans = that.__trans,\n                    eximg = new Image(pixbuff, width, height, trans);\n                eximg.__lwip.crop(left, top, right, bottom, function(err) {\n                    callback(err, eximg);\n                });\n            }\n        );\n    };\n\n    Image.prototype.toBuffer = function() {\n        this.__lock();\n        var that = this;\n        try{\n            judges.toBuffer(\n                arguments,\n                function(type, params, callback) {\n                    if (type === 'jpg' || type === 'jpeg') {\n                        util.normalizeJpegParams(params);\n                        return encoder.jpeg(\n                            that.__lwip.buffer(),\n                            that.__lwip.width(),\n                            that.__lwip.height(),\n                            params.quality,\n                            encoderCb\n                        );\n                    } else if (type === 'png') {\n                        util.normalizePngParams(params);\n                        return encoder.png(\n                            that.__lwip.buffer(),\n                            that.__lwip.width(),\n                            that.__lwip.height(),\n                            params.compression,\n                            params.interlaced,\n                            params.transparency === 'auto' ? that.__trans : params.transparency,\n                            that.__metadata,\n                            encoderCb\n                        );\n                    } else if (type === 'gif') {\n                        util.normalizeGifParams(params);\n                        return encoder.gif(\n                            that.__lwip.buffer(),\n                            that.__lwip.width(),\n                            that.__lwip.height(),\n                            util.getClosest2Exp(params.colors),\n                            params.colors,\n                            params.interlaced,\n                            params.transparency === 'auto' ? that.__trans : params.transparency,\n                            params.threshold,\n                            encoderCb\n                        );\n                    } else throw Error('Unknown type \\'' + type + '\\'');\n\n                    function encoderCb(err, buffer) {\n                        that.__release();\n                        callback(err, buffer);\n                    }\n                }\n            );\n        } catch (err){\n            that.__release();\n            throw err;\n        }\n    };\n\n    Image.prototype.writeFile = function() {\n        var that = this;\n        judges.writeFile(\n            arguments,\n            function(outpath, type, params, callback) {\n                type = type || path.extname(outpath).slice(1).toLowerCase();\n                that.toBuffer(type, params, function(err, buffer) {\n                    if (err) return callback(err);\n                    fs.writeFile(outpath, buffer, {\n                        encoding: 'binary'\n                    }, callback);\n                });\n            }\n        );\n    };\n\n})(void 0);\n","/home/travis/build/npmtest/node-npmtest-lwip/node_modules/lwip/lib/Image.js":"(function(undefined) {\n\n    var lwip_image = require('bindings')('lwip_image');\n\n    function Image(pixelsBuf, width, height, trans, metadata) {\n        this.__lwip = new lwip_image.LwipImage(pixelsBuf, width, height);\n        this.__locked = false;\n        this.__trans = trans;\n        this.__metadata = metadata;\n    }\n\n    // EXPORTS\n    // -------\n    module.exports = Image;\n\n})(void 0);\n","/home/travis/build/npmtest/node-npmtest-lwip/node_modules/lwip/lib/Batch.js":"(function(undefined) {\n\n    function Batch(image) {\n        this.__image = image;\n        this.__queue = [];\n        this.__running = false;\n    }\n\n    Batch.prototype.__addOp = function(handle, args) {\n        this.__queue.push({\n            handle: handle,\n            args: args\n        });\n    };\n\n    // EXPORTS\n    // -------\n    module.exports = Batch;\n\n})(void 0);\n","/home/travis/build/npmtest/node-npmtest-lwip/node_modules/lwip/lib/BatchPrototypeInit.js":"(function(undefined) {\n\n    var path = require('path'),\n        fs = require('fs'),\n        async = require('async'),\n        decree = require('decree'),\n        defs = require('./defs'),\n        util = require('./util'),\n        Batch = require('./Batch'),\n        Image = require('./Image');\n\n    var judges = {\n        // slice(0,-1) cuts the callback declaration, which is not needed in\n        // batch mode.\n        scale: decree(defs.args.scale.slice(0, -1)),\n        resize: decree(defs.args.resize.slice(0, -1)),\n        contain: decree(defs.args.contain.slice(0, -1)),\n        cover: decree(defs.args.cover.slice(0, -1)),\n        rotate: decree(defs.args.rotate.slice(0, -1)),\n        blur: decree(defs.args.blur.slice(0, -1)),\n        hslaAdjust: decree(defs.args.hslaAdjust.slice(0, -1)),\n        saturate: decree(defs.args.saturate.slice(0, -1)),\n        lighten: decree(defs.args.lighten.slice(0, -1)),\n        darken: decree(defs.args.darken.slice(0, -1)),\n        fade: decree(defs.args.fade.slice(0, -1)),\n        opacify: decree(defs.args.opacify.slice(0, -1)),\n        hue: decree(defs.args.hue.slice(0, -1)),\n        crop: decree(defs.args.crop.slice(0, -1)),\n        mirror: decree(defs.args.mirror.slice(0, -1)),\n        pad: decree(defs.args.pad.slice(0, -1)),\n        border: decree(defs.args.border.slice(0, -1)),\n        sharpen: decree(defs.args.sharpen.slice(0, -1)),\n        paste: decree(defs.args.paste.slice(0, -1)),\n        clone: decree(defs.args.clone.slice(0, -1)),\n        extract: decree(defs.args.extract.slice(0, -1)),\n        setPixel: decree(defs.args.setPixel.slice(0, -1)),\n        exec: decree(defs.args.exec),\n        toBuffer: decree(defs.args.toBuffer),\n        writeFile: decree(defs.args.writeFile)\n    };\n\n    var undefinedFilter = util.undefinedFilter,\n        normalizeColor = util.normalizeColor;\n\n    // Extend Image with image.batch()\n    Image.prototype.batch = function() {\n        return new Batch(this);\n    };\n\n    Batch.prototype.exec = function() {\n        var that = this;\n        judges.exec(arguments, function(callback) {\n            if (that.__running) throw Error(\"Batch is already running\");\n            that.__running = true;\n            async.eachSeries(that.__queue, function(op, done) {\n                op.args.push(done);\n                // if an exception is thrown here, it should be caught (because we\n                // are in the middle of async process) and translated to an 'err'\n                // parameter.\n                try {\n                    op.handle.apply(that.__image, op.args);\n                } catch (e) {\n                    done(e);\n                }\n            }, function(err) {\n                that.__queue.length = 0; // queue is now empty\n                that.__running = false;\n                callback(err, that.__image);\n            });\n        });\n    };\n\n    Batch.prototype.scale = function() {\n        var that = this;\n        judges.scale(arguments, function(wRatio, hRatio, inter) {\n            that.__addOp(that.__image.scale, [wRatio, hRatio, inter].filter(undefinedFilter));\n        });\n        return this;\n    };\n\n    Batch.prototype.resize = function() {\n        var that = this;\n        judges.resize(arguments, function(width, height, inter) {\n            that.__addOp(that.__image.resize, [width, height, inter].filter(undefinedFilter));\n        });\n        return this;\n    };\n\n    Batch.prototype.contain = function() {\n        var that = this;\n        judges.contain(arguments, function(width, height, color, inter) {\n            that.__addOp(that.__image.contain, [width, height, color, inter].filter(undefinedFilter));\n        });\n        return this;\n    };\n\n    Batch.prototype.cover = function() {\n        var that = this;\n        judges.cover(arguments, function(width, height, inter) {\n            that.__addOp(that.__image.cover, [width, height, inter].filter(undefinedFilter));\n        });\n        return this;\n    };\n\n    Batch.prototype.rotate = function() {\n        var that = this;\n        judges.rotate(arguments, function(degs, color) {\n            color = normalizeColor(color);\n            that.__addOp(that.__image.rotate, [degs, color].filter(undefinedFilter));\n        });\n        return this;\n    };\n\n    Batch.prototype.blur = function() {\n        var that = this;\n        judges.blur(arguments, function(sigma) {\n            that.__addOp(that.__image.blur, [sigma].filter(undefinedFilter));\n        });\n        return this;\n    };\n\n    Batch.prototype.hslaAdjust = function() {\n        var that = this;\n        judges.hslaAdjust(arguments, function(hs, sd, ld, ad) {\n            that.__addOp(that.__image.hslaAdjust, [hs, sd, ld, ad].filter(undefinedFilter));\n        });\n        return this;\n    };\n\n    Batch.prototype.saturate = function() {\n        var that = this;\n        judges.saturate(arguments, function(delta) {\n            that.__addOp(that.__image.saturate, [delta].filter(undefinedFilter));\n        });\n        return this;\n    };\n\n    Batch.prototype.lighten = function() {\n        var that = this;\n        judges.lighten(arguments, function(delta) {\n            that.__addOp(that.__image.lighten, [delta].filter(undefinedFilter));\n        });\n        return this;\n    };\n\n    Batch.prototype.darken = function() {\n        var that = this;\n        judges.darken(arguments, function(delta) {\n            that.__addOp(that.__image.darken, [delta].filter(undefinedFilter));\n        });\n        return this;\n    };\n\n    Batch.prototype.fade = function() {\n        var that = this;\n        judges.fade(arguments, function(delta) {\n            that.__addOp(that.__image.fade, [delta].filter(undefinedFilter));\n        });\n        return this;\n    };\n\n    Batch.prototype.opacify = function() {\n        this.__addOp(this.__image.opacify, []);\n        return this;\n    };\n\n    Batch.prototype.hue = function() {\n        var that = this;\n        judges.hue(arguments, function(shift) {\n            that.__addOp(that.__image.hue, [shift].filter(undefinedFilter));\n        });\n        return this;\n    };\n\n    Batch.prototype.crop = function() {\n        var that = this;\n        judges.crop(arguments, function(left, top, right, bottom) {\n            that.__addOp(that.__image.crop, [left, top, right, bottom].filter(undefinedFilter));\n        });\n        return this;\n    };\n\n    Batch.prototype.mirror = function() {\n        var that = this;\n        judges.mirror(arguments, function(axes) {\n            that.__addOp(that.__image.mirror, [axes].filter(undefinedFilter));\n        });\n        return this;\n    };\n\n    // mirror alias:\n    Batch.prototype.flip = Batch.prototype.mirror;\n\n    Batch.prototype.pad = function() {\n        var that = this;\n        judges.pad(arguments, function(left, top, right, bottom, color) {\n            color = normalizeColor(color);\n            that.__addOp(that.__image.pad, [left, top, right, bottom, color].filter(undefinedFilter));\n        });\n        return this;\n    };\n\n    Batch.prototype.border = function() {\n        var that = this;\n        judges.border(arguments, function(width, color) {\n            color = normalizeColor(color);\n            that.__addOp(that.__image.border, [width, color].filter(undefinedFilter));\n        });\n        return this;\n    };\n\n    Batch.prototype.sharpen = function() {\n        var that = this;\n        judges.sharpen(arguments, function(amplitude) {\n            that.__addOp(that.__image.sharpen, [amplitude].filter(undefinedFilter));\n        });\n        return this;\n    };\n\n    Batch.prototype.paste = function() {\n        var that = this;\n        judges.paste(arguments, function(left, top, img) {\n            that.__addOp(that.__image.paste, [left, top, img].filter(undefinedFilter));\n        });\n        return this;\n    };\n\n    Batch.prototype.setPixel = function() {\n        var that = this;\n        judges.setPixel(arguments, function(left, top, color) {\n            that.__addOp(that.__image.setPixel, [left, top, color].filter(undefinedFilter));\n        });\n        return this;\n    };\n\n    Batch.prototype.toBuffer = function() {\n        var that = this;\n        judges.toBuffer(arguments, function(type, params, callback) {\n            if (type === 'jpg' || type === 'jpeg') {\n                util.normalizeJpegParams(params);\n            } else if (type === 'png') {\n                util.normalizePngParams(params);\n            } else if (type === 'gif') {\n                util.normalizeGifParams(params);\n            } else throw Error('Unknown type \\'' + type + '\\'');\n            that.exec(function(err, image) {\n                if (err) return callback(err);\n                image.toBuffer(type, params, callback);\n            });\n        });\n    };\n\n    Batch.prototype.writeFile = function(outpath, type, params, callback) {\n        var that = this;\n        judges.writeFile(arguments, function(outpath, type, params, callback) {\n            type = type || path.extname(outpath).slice(1).toLowerCase();\n            that.toBuffer(type, params, function(err, buffer) {\n                if (err) return callback(err);\n                fs.writeFile(outpath, buffer, {\n                    encoding: 'binary'\n                }, callback);\n            });\n        });\n    };\n\n})(void 0);\n","/home/travis/build/npmtest/node-npmtest-lwip/node_modules/lwip/lib/defs.js":"(function() {\n\n    var defaults = exports.defaults = {\n        DEF_INTERPOLATION: 'lanczos',\n        DEF_ROTATE_COLOR: 'gray',\n        DEF_BORDER_COLOR: 'gray',\n        DEF_PAD_COLOR: 'gray',\n        DEF_COLOR_ALPHA: 100,\n        DEF_JPEG_QUALITY: 100,\n        PNG_DEF_COMPRESSION: 'fast',\n        PNG_DEF_INTERLACED: false,\n        PNG_DEF_TRANSPARENT: 'auto',\n        GIF_DEF_COLORS: 256,\n        GIF_DEF_INTERLACED: false,\n        GIF_DEF_TRANSPARENT: 'auto',\n        GIF_DEF_THRESHOLD: 50,\n        DEF_CREATE_COLOR: [0, 0, 0, 0],\n        DEF_CONTAIN_COLOR: [0, 0, 0, 0]\n    };\n\n    var interpolations = exports.interpolations = {\n        'nearest-neighbor': 1,\n        'moving-average': 2,\n        'linear': 3,\n        'grid': 4,\n        'cubic': 5,\n        'lanczos': 6\n    };\n\n    exports.colors = {\n        'black': {\n            r: 0,\n            g: 0,\n            b: 0,\n            a: 100\n        },\n        'white': {\n            r: 255,\n            g: 255,\n            b: 255,\n            a: 100\n        },\n        'red': {\n            r: 255,\n            g: 0,\n            b: 0,\n            a: 100\n        },\n        'blue': {\n            r: 0,\n            g: 0,\n            b: 255,\n            a: 100\n        },\n        'green': {\n            r: 0,\n            g: 255,\n            b: 0,\n            a: 100\n        },\n        'cyan': {\n            r: 0,\n            g: 255,\n            b: 255,\n            a: 100\n        },\n        'yellow': {\n            r: 255,\n            g: 255,\n            b: 0,\n            a: 100\n        },\n        'gray': {\n            r: 128,\n            g: 128,\n            b: 128,\n            a: 100\n        },\n        'magenta': {\n            r: 255,\n            g: 0,\n            b: 255,\n            a: 100\n        }\n    };\n\n    exports.args = {\n        open: [{\n            name: 'source',\n            type: '*'\n        }, {\n            name: 'type',\n            types: ['string', 'raw-buffer-properties'],\n            optional: true\n        }, {\n            name: 'callback',\n            type: 'function'\n        }],\n        create: [{\n            name: 'width',\n            type: 'p-number'\n        }, {\n            name: 'height',\n            type: 'p-number'\n        }, {\n            name: 'color',\n            type: 'color',\n            optional: true,\n            default: defaults.DEF_CREATE_COLOR\n        }, {\n            name: 'callback',\n            type: 'function'\n        }],\n        scale: [{\n            name: 'wRation',\n            type: 'p-number'\n        }, {\n            name: 'hRatio',\n            type: 'p-number',\n            optional: true\n        }, {\n            name: 'interpolation',\n            type: 'interpolation',\n            optional: true,\n            default: defaults.DEF_INTERPOLATION\n        }, {\n            name: 'callback',\n            type: 'function'\n        }],\n        resize: [{\n            name: 'width',\n            type: 'p-number'\n        }, {\n            name: 'height',\n            type: 'p-number',\n            optional: true\n        }, {\n            name: 'interpolation',\n            type: 'interpolation',\n            optional: true,\n            default: defaults.DEF_INTERPOLATION\n        }, {\n            name: 'callback',\n            type: 'function'\n        }],\n        rotate: [{\n            name: 'degs',\n            type: 'number'\n        }, {\n            name: 'color',\n            type: 'color',\n            optional: true,\n            default: defaults.DEF_ROTATE_COLOR\n        }, {\n            name: 'callback',\n            type: 'function'\n        }],\n        blur: [{\n            name: 'sigma',\n            type: 'nn-number'\n        }, {\n            name: 'callback',\n            type: 'function'\n        }],\n        hslaAdjust: [{\n            name: 'hs',\n            type: 'number'\n        }, {\n            name: 'sd',\n            type: 'number'\n        }, {\n            name: 'ld',\n            type: 'number'\n        }, {\n            name: 'ad',\n            type: 'number'\n        }, {\n            name: 'callback',\n            type: 'function'\n        }],\n        saturate: [{\n            name: 'delta',\n            type: 'number'\n        }, {\n            name: 'callback',\n            type: 'function'\n        }],\n        lighten: [{\n            name: 'delta',\n            type: 'number'\n        }, {\n            name: 'callback',\n            type: 'function'\n        }],\n        darken: [{\n            name: 'delta',\n            type: 'number'\n        }, {\n            name: 'callback',\n            type: 'function'\n        }],\n        fade: [{\n            name: 'delta',\n            type: 'number'\n        }, {\n            name: 'callback',\n            type: 'function'\n        }],\n        opacify: [{\n            name: 'callback',\n            type: 'function'\n        }],\n        hue: [{\n            name: 'shift',\n            type: 'number'\n        }, {\n            name: 'callback',\n            type: 'function'\n        }],\n        crop: [{\n            name: 'left',\n            type: 'nn-number'\n        }, {\n            name: 'top',\n            type: 'nn-number'\n        }, {\n            name: 'right',\n            type: 'nn-number',\n            optional: true\n        }, {\n            name: 'bottom',\n            type: 'nn-number',\n            optional: true\n        }, {\n            name: 'callback',\n            type: 'function'\n        }],\n        mirror: [{\n            name: 'axes',\n            type: 'axes'\n        }, {\n            name: 'callback',\n            type: 'function'\n        }],\n        exec: [{\n            name: 'callback',\n            type: 'function'\n        }],\n        toBuffer: [{\n            name: 'type',\n            type: 'string'\n        }, {\n            name: 'params',\n            type: 'hash',\n            optional: true,\n            default: {}\n        }, {\n            name: 'callback',\n            type: 'function'\n        }],\n        getPixel: [{\n            name: 'left',\n            type: 'nn-int'\n        }, {\n            name: 'top',\n            type: 'nn-int'\n        }],\n        border: [{\n            name: 'width',\n            type: 'nn-number'\n        }, {\n            name: 'color',\n            type: 'color',\n            optional: true,\n            default: defaults.DEF_BORDER_COLOR\n        }, {\n            name: 'callback',\n            type: 'function'\n        }],\n        pad: [{\n            name: 'left',\n            type: 'nn-number'\n        }, {\n            name: 'top',\n            type: 'nn-number'\n        }, {\n            name: 'right',\n            type: 'nn-number'\n        }, {\n            name: 'bottom',\n            type: 'nn-number'\n        }, {\n            name: 'color',\n            type: 'color',\n            optional: true,\n            default: defaults.DEF_PAD_COLOR\n        }, {\n            name: 'callback',\n            type: 'function'\n        }],\n        sharpen: [{\n            name: 'amplitude',\n            type: 'number'\n        }, {\n            name: 'callback',\n            type: 'function'\n        }],\n        clone: [{\n            name: 'callback',\n            type: 'function'\n        }],\n        paste: [{\n            name: 'left',\n            type: 'nn-number'\n        }, {\n            name: 'top',\n            type: 'nn-number'\n        }, {\n            name: 'image',\n            type: 'image'\n        }, {\n            name: 'callback',\n            type: 'function'\n        }],\n        extract: [{\n            name: 'left',\n            type: 'nn-number'\n        }, {\n            name: 'top',\n            type: 'nn-number'\n        }, {\n            name: 'right',\n            type: 'nn-number'\n        }, {\n            name: 'bottom',\n            type: 'nn-number'\n        }, {\n            name: 'callback',\n            type: 'function'\n        }],\n        writeFile: [{\n            name: 'path',\n            type: 'string'\n        }, {\n            name: 'type',\n            type: 'string',\n            optional: true\n        }, {\n            name: 'params',\n            type: 'hash',\n            optional: true,\n            default: {}\n        }, {\n            name: 'callback',\n            type: 'function'\n        }],\n        setPixel: [{\n            name: 'left',\n            type: 'nn-int'\n        }, {\n            name: 'top',\n            type: 'nn-int'\n        }, {\n            name: 'color',\n            type: 'color'\n        }, {\n            name: 'callback',\n            type: 'function'\n        }],\n        contain: [{\n            name: 'width',\n            type: 'p-number'\n        }, {\n            name: 'height',\n            type: 'p-number'\n        }, {\n            name: 'color',\n            type: 'color',\n            optional: true,\n            default: defaults.DEF_CONTAIN_COLOR\n        }, {\n            name: 'interpolation',\n            type: 'interpolation',\n            optional: true,\n            default: defaults.DEF_INTERPOLATION\n        }, {\n            name: 'callback',\n            type: 'function'\n        }],\n        cover: [{\n            name: 'width',\n            type: 'p-number'\n        }, {\n            name: 'height',\n            type: 'p-number'\n        }, {\n            name: 'interpolation',\n            type: 'interpolation',\n            optional: true,\n            default: defaults.DEF_INTERPOLATION\n        }, {\n            name: 'callback',\n            type: 'function'\n        }],\n    };\n\n})();\n","/home/travis/build/npmtest/node-npmtest-lwip/node_modules/lwip/lib/obtain.js":"(function(undefined) {\n\n    var path = require('path'),\n        fs = require('fs'),\n        decree = require('decree'),\n        defs = require('./defs'),\n        util = require('./util'),\n        decoder = require('bindings')('lwip_decoder'),\n        Image = require('./Image');\n\n    var openers = [{\n        exts: ['jpg', 'jpeg'],\n        opener: decoder.jpeg\n    }, {\n        exts: ['png'],\n        opener: decoder.png\n    }, {\n        exts: ['gif'],\n        opener: decoder.gif\n    }];\n\n    function open() {\n        decree(defs.args.open)(arguments, function(source, type, callback) {\n            var opener;\n            if (typeof source === 'string') {\n                type = type || path.extname(source).slice(1);\n                if (typeof type !== 'string') throw Error('Invalid type');\n                opener = getOpener(type);\n                fs.readFile(source, function(err, imbuff) {\n                    if (err) return callback(err);\n                    opener(imbuff, function(err, pixelsBuf, width, height, channels, trans, metadata) {\n                        callback(err, err ? null : new Image(pixelsBuf, width, height, trans, metadata));\n                    });\n                });\n            } else if (source instanceof Buffer) {\n                if (typeof type === 'object') {\n                    // it's a raw pixels buffer\n                    var channelSize = type.width * type.height;\n                    var numChannels = source.length / channelSize;\n                    if (numChannels !== parseInt(numChannels) || numChannels < 1 || numChannels > 4)\n                        throw Error(\"Buffer size does not match width and height\");\n                    if (numChannels !== 4) source = util.makeRgbaBuffer(source, numChannels);\n                    callback(null, new Image(source, type.width, type.height, (numChannels % 2 === 0)));\n                } else if (typeof type === 'string') {\n                    // it's an encoded image\n                    opener = getOpener(type);\n                    opener(source, function(err, pixelsBuf, width, height, channels, trans, metadata) {\n                        callback(err, err ? null : new Image(pixelsBuf, width, height, trans, metadata));\n                    });\n                } else throw Error('Invalid type');\n            } else throw Error(\"Invalid source\");\n        });\n    }\n\n    function getOpener(ext) {\n        ext = ext.toLowerCase();\n        for (var i = 0; i < openers.length; i++) {\n            var opener = openers[i].opener,\n                exts = openers[i].exts;\n            if (exts.indexOf(ext) !== -1) return opener;\n        }\n        throw Error('Unknown type \\'' + ext + '\\'');\n    }\n\n    function create() {\n        decree(defs.args.create)(arguments, function(width, height, color, callback) {\n            color = util.normalizeColor(color);\n            var trans = color.a < 100,\n                c_len = width * height,\n                pixelsBuf = new Buffer(c_len * 4);\n            for (var i = 0; i < width * height; i++) {\n                pixelsBuf[i] = color.r;\n                pixelsBuf[c_len + i] = color.g;\n                pixelsBuf[2 * c_len + i] = color.b;\n                pixelsBuf[3 * c_len + i] = color.a;\n            }\n            setImmediate(function() {\n                callback(null, new Image(pixelsBuf, width, height, trans));\n            });\n        });\n    }\n\n    // EXPORTS\n    // -------\n    module.exports = {\n        open: open,\n        create: create\n    };\n})(void 0);\n","/home/travis/build/npmtest/node-npmtest-lwip/node_modules/lwip/lib/util.js":"(function(undefined) {\n\n    var defs = require('./defs'),\n        decree = require('decree'),\n        Image = require('./Image');\n\n    decree.register('color', validateColor);\n    decree.register('interpolation', validateInterpolation);\n    decree.register('axes', validateAxes);\n    decree.register('image', validateImage);\n    decree.register('raw-buffer-properties', validateRawBufferProperties);\n\n    function undefinedFilter(v) {\n        return v !== undefined;\n    }\n\n    function validateInterpolation(inter){\n        return defs.interpolations.hasOwnProperty(inter);\n    }\n\n    function validateAxes(axes){\n        return ['x', 'y', 'xy', 'yx'].indexOf(axes) !== -1;\n    }\n\n    function validateImage(img){\n        return img instanceof Image;\n    }\n\n    function validateColor(color) {\n        if (typeof color === 'string') {\n            if (!defs.colors[color]) return false;\n        } else {\n            if (color instanceof Array) {\n                color = {\n                    r: color[0],\n                    g: color[1],\n                    b: color[2],\n                    a: color[3]\n                };\n            }\n            var a = color.a;\n            if (a !== 0) a = a || defs.defaults.DEF_COLOR_ALPHA; // (don't modify the original color object)\n            if (color.r != parseInt(color.r) || color.r < 0 || color.r > 255 ||\n                color.g != parseInt(color.g) || color.g < 0 || color.g > 255 ||\n                color.b != parseInt(color.b) || color.b < 0 || color.b > 255 ||\n                a != parseInt(a) || a < 0 || a > 100)\n                return false;\n        }\n        return true;\n    }\n\n    function validateRawBufferProperties(p) {\n        if (p.width !== parseInt(p.width) || p.width <= 0 ||\n            p.height !== parseInt(p.height) || p.height <= 0)\n            return false;\n        return true;\n    }\n\n    function normalizeColor(color) {\n        if (typeof color === 'string') {\n            color = defs.colors[color];\n        } else if (color instanceof Array) {\n            color = {\n                r: color[0],\n                g: color[1],\n                b: color[2],\n                a: color[3]\n            };\n        }\n        if (color.a !== 0) color.a = color.a || defs.defaults.DEF_COLOR_ALPHA;\n        return color;\n    }\n\n    function normalizePngParams(params){\n        params.compression = params.compression || defs.defaults.PNG_DEF_COMPRESSION;\n        if (params.compression === 'none') params.compression = 0;\n        else if (params.compression === 'fast') params.compression = 1;\n        else if (params.compression === 'high') params.compression = 2;\n        else if ([0, 1, 2].indexOf(params.compression) === -1)\n            throw Error('Invalid PNG compression');\n        params.interlaced = params.interlaced || defs.defaults.PNG_DEF_INTERLACED;\n        if (typeof params.interlaced !== 'boolean')\n            throw Error('PNG \\'interlaced\\' must be boolean');\n        if (params.transparency !== false)\n            params.transparency = params.transparency || defs.defaults.PNG_DEF_TRANSPARENT;\n        if (typeof params.transparency !== 'boolean'){\n            if (typeof params.transparency !== 'string' ||\n                params.transparency.toLowerCase() !== 'auto')\n                throw Error('PNG \\'transparency\\' must be boolean or \\'auto\\'');\n        }\n    }\n\n    function normalizeGifParams(params){\n        params.colors = params.colors || defs.defaults.GIF_DEF_COLORS;\n        if (params.colors != parseInt(params.colors) || params.colors < 2 || params.colors > 256)\n            throw Error('Invalid GIF color table size');\n        params.interlaced = params.interlaced || defs.defaults.GIF_DEF_INTERLACED;\n        if (typeof params.interlaced !== 'boolean')\n            throw Error('GIF \\'interlaced\\' must be boolean');\n        if (params.transparency !== false)\n            params.transparency = params.transparency || defs.defaults.GIF_DEF_TRANSPARENT;\n        if (typeof params.transparency !== 'boolean'){\n            if (typeof params.transparency !== 'string' ||\n                params.transparency.toLowerCase() !== 'auto')\n                throw Error('GIF \\'transparency\\' must be boolean or \\'auto\\'');\n        }\n        if (params.threshold !== 0) params.threshold = params.threshold || defs.defaults.GIF_DEF_THRESHOLD;\n        if (params.threshold != parseInt(params.threshold) || params.threshold < 0 || params.threshold > 100)\n            throw Error('Invalid GIF transparency threshold');\n    }\n\n    function normalizeJpegParams(params){\n        if (params.quality !== 0)\n            params.quality = params.quality || defs.defaults.DEF_JPEG_QUALITY;\n        if (params.quality != parseInt(params.quality) ||\n            params.quality < 0 || params.quality > 100)\n            throw Error('Invalid JPEG quality');\n    }\n\n    function getClosest2Exp(num){\n        // num is assumed to be between 2 and 256\n        // returned the closes 2 exponent which is **larger** than num\n        var e, n, min, r;\n        for (e = 1 ; e <= 8; e++){\n            n = 1 << e;\n            if (num === n) return n;\n            if (!min) { min = num - n; r = e; }\n            else if (num - n < min){\n                min = num - n;\n                r = e;\n                if (min < 0) return 1 << r;\n            }\n        }\n        return 256;\n    }\n\n    function makeRgbaBuffer(orig, channels){\n        var chanLen = orig.length / channels;\n        if (chanLen !== parseInt(chanLen) || channels < 1 || channels > 3)\n            throw Error(\"Incorrect number of channels in original buffer\");\n        var rgba = new Buffer(chanLen * 4);\n        switch (channels){\n            case 1:\n                orig.copy(rgba, 0, 0, chanLen);\n                orig.copy(rgba, chanLen, 0, chanLen);\n                orig.copy(rgba, 2 * chanLen, 0, chanLen);\n                rgba.fill(100, 3 * chanLen);\n                break;\n            case 2:\n                orig.copy(rgba, 0, 0, chanLen);\n                orig.copy(rgba, chanLen, 0, chanLen);\n                orig.copy(rgba, 2 * chanLen, 0, chanLen);\n                orig.copy(rgba, 3 * chanLen, chanLen);\n                break;\n            case 3:\n                orig.copy(rgba, 0, 0, chanLen);\n                orig.copy(rgba, chanLen, chanLen, 2 * chanLen);\n                orig.copy(rgba, 2 * chanLen, 2 * chanLen);\n                rgba.fill(100, 3 * chanLen);\n                break;\n        }\n        return rgba;\n    }\n\n    module.exports = {\n        undefinedFilter: undefinedFilter,\n        normalizeColor: normalizeColor,\n        normalizePngParams: normalizePngParams,\n        normalizeGifParams: normalizeGifParams,\n        normalizeJpegParams: normalizeJpegParams,\n        getClosest2Exp: getClosest2Exp,\n        makeRgbaBuffer: makeRgbaBuffer\n    };\n\n})(void 0);\n"}